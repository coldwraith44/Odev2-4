#Anıl Erdoğan
#220501006
#Bilgisayar Mühendisliği
#Akın Turna
#220501013
#Bilgisayar Mühendisliği


import random
import pygame


class PokemonCard:

    def __init__(self, name, damage):
        self._name = name
        self._damage = damage
    
    def get_name(self):
        return self._name
    
    def set_name(self, name):
        self._name = name
    
    def get_damage(self):
        return self._damage
    
    def set_damage(self, damage):
        self._damage = damage


class Player:

    def __init__(self, name):
        self._name = name
        self._hand = []
        self._score = 0
    
    def get_name(self):
        return self._name
    
    def set_name(self, name):
        self._name = name
    
    def get_hand(self):
        return self._hand
    
    def add_card_to_hand(self, card):
        self._hand.append(card)
    
    def play_card(self, index):
        return self._hand.pop(index)
    
    def get_score(self):
        return self._score
    
    def set_score(self, score):
        self._score = score
    
    def choose_card(self, index=None):
        pass
    
    def view_hand(self):
        return self._hand


class AdminPlayer(Player):

    def __init__(self, name):
        super().__init__(name)
    
    def view_opponent_cards(self, opponent):
        return opponent.get_hand()
    
    def choose_card(self, card_index):
        return self.play_card(card_index)


class HumanPlayer(Player):

    def choose_card(self, card_index):
        return self.play_card(card_index)


class ComputerPlayer(Player):

    def choose_card(self, index=None):
        index = random.randint(0, len(self._hand) - 1)
        return self.play_card(index)

class ComputerVsComputerPlayer(Player):

    def choose_card(self, index=None):
        index = random.randint(0, len(self._hand) - 1)
        return self.play_card(index)
    
class Control:
    def __init__(self) -> None:
        print("Oyun başarılı bir şekilde açıldı!")

class Game:

    def __init__(self):

        self.deck = self.create_deck()
        self.player = None
        self.computer = ComputerPlayer("Computer")
        self.table_cards = []
        self.player_card = None
        self.computer_card = None
        self.control_instance = Control()

    def create_deck(self):

        names = ["Bulbasaur", "Charmander", "Squirtle", "Pikachu", "Jigglypuff", "Meowth", "Psyduck", "Geodude", "Eevee", "Snorlax"]
        damages = [20, 25, 15, 30, 10, 12, 18, 22, 19, 28]
        deck = [PokemonCard(names[i], damages[i]) for i in range(len(names))]
        random.shuffle(deck)
        return deck
    
    def deal_cards(self):

        for _ in range(3):
            self.player.add_card_to_hand(self.deck.pop())
            self.computer.add_card_to_hand(self.deck.pop())
        self.table_cards = [self.deck.pop() for _ in range(4)]

    def set_player_mode(self, mode):

        if mode == "admin":
            self.player = AdminPlayer("Admin")
        elif mode == "user":
            self.player = HumanPlayer("Player")
        elif mode == "computer":
            self.player = ComputerVsComputerPlayer("Computer")
            self.computer = ComputerVsComputerPlayer("Computer 2")

    def play_round(self, player_card_index=None):

        if self.player.get_hand():
            self.player_card = self.player.choose_card(player_card_index)
        else:
            self.player_card = None
        
        if self.computer.get_hand():
            self.computer_card = self.computer.choose_card()
        else:
            self.computer_card = None
        
        if self.player_card and self.computer_card:
            if self.player_card.get_damage() > self.computer_card.get_damage():
                self.player.set_score(self.player.get_score() + 5)
            elif self.player_card.get_damage() < self.computer_card.get_damage():
                self.computer.set_score(self.computer.get_score() + 5)
        
        if len(self.table_cards) >= 2:
            self.player.add_card_to_hand(self.table_cards.pop())
            self.computer.add_card_to_hand(self.table_cards.pop())
        
        return self.is_game_over()

    def is_game_over(self):

        return len(self.player.get_hand()) == 0 and len(self.table_cards) == 0

    def determine_winner(self):

        if self.player.get_score() > self.computer.get_score():
            return "Kullanıcı Kazandı!!!"
        elif self.player.get_score() < self.computer.get_score():
            return "Bilgisayar Kazandı!!!"
        else:
            return "Beraberlik!!!"
    
    def view_opponent_cards(self):

        if isinstance(self.player, AdminPlayer):
            return self.computer.get_hand()
        else:
            return []


pygame.init()


screen = pygame.display.set_mode((800, 600))
pygame.display.set_caption("Pokemon Kart Oyunu")
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)


font = pygame.font.SysFont(None, 35)


CARD_WIDTH = 100
CARD_HEIGHT = 150

def draw_card(card, x, y, face_up=True):

    pygame.draw.rect(screen, BLACK, (x, y, CARD_WIDTH, CARD_HEIGHT), 2)  
    pygame.draw.rect(screen, (0, 255, 255), (x + 2, y + 2, CARD_WIDTH - 4, CARD_HEIGHT - 4))  
    
    if face_up and card:
        name_text = font.render(card.get_name(), True, BLACK)
        name_text_small = pygame.transform.scale(name_text, (int(name_text.get_width() * 0.6), int(name_text.get_height() * 0.6)))  
        damage_text = font.render(f"Hasar: {card.get_damage()}", True, BLACK)
        damage_text_small = pygame.transform.scale(damage_text, (int(damage_text.get_width() * 0.8), int(damage_text.get_height() * 0.8)))  
        
        screen.blit(name_text_small, (x + 10, y + 10))
        screen.blit(damage_text_small, (x + 10, y + 30)) 

    else:
        back_text = font.render("Kart", True, BLACK)
        screen.blit(back_text, (x + 10, y + 10))

def main():

    game = Game()
    
    mode_selected = False
    while not mode_selected:

        screen.fill((0, 255, 0))
        mode_text = font.render("Oyun Modunu Seçin: Admin, Kullanıcı veya Bilgisayar", True, BLACK)
        screen.blit(mode_text, (100, 250))
        mode_text1 = font.render("Admin için 'A' tuşuna, kullanıcı için 'K' tuşuna", True, BLACK)
        screen.blit(mode_text1, (130, 270))
        mode_text2 = font.render("bilgisayar için 'B' tuşuna basın", True, BLACK)
        screen.blit(mode_text2, (220, 290))
        mode_text3 = font.render("Pokemon Kart Oyunu", True, (255, 0, 0))
        screen.blit(mode_text3, (260,140))
        
        
        pygame.display.flip()
        
        for event in pygame.event.get():

            if event.type == pygame.KEYDOWN:
                if event.unicode == "a":
                    game.set_player_mode("admin")
                    mode_selected = True
                elif event.unicode == "k":
                    game.set_player_mode("user")
                    mode_selected = True
                elif event.unicode == "b":
                    game.set_player_mode("computer")
                    mode_selected = True
            elif event.type == pygame.QUIT:
                pygame.quit()
                return
    
    game.deal_cards()
    
    running = True
    last_battle = False
    computer_mode = isinstance(game.player, ComputerVsComputerPlayer)
    last_move_time = pygame.time.get_ticks()
    
    while running:

        screen.fill((0, 255, 0))
        
        current_time = pygame.time.get_ticks()
        
        for event in pygame.event.get():
            
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.MOUSEBUTTONDOWN and not computer_mode:
                if not game.is_game_over() and not last_battle:
                    pos = pygame.mouse.get_pos()
                    if 100 <= pos[0] <= 200 and 400 <= pos[1] <= 550:
                        last_battle = game.play_round(0)
                    elif 250 <= pos[0] <= 350 and 400 <= pos[1] <= 550:
                        last_battle = game.play_round(1)
                    elif 400 <= pos[0] <= 500 and 400 <= pos[1] <= 550:
                        last_battle = game.play_round(2)
        
        if computer_mode and current_time - last_move_time >= 3000 and not last_battle:
            if not game.is_game_over():
                last_battle = game.play_round()
                last_move_time = current_time
        
        if isinstance(game.player, AdminPlayer) or computer_mode:
            opponent_cards = game.computer.get_hand()
            for i, card in enumerate(opponent_cards):
                draw_card(card, 100 + i * 150, 50)
        else:
            for i in range(len(game.computer.get_hand())):
                draw_card(None, 100 + i * 150, 50, face_up=False)
        
        player_cards = game.player.view_hand()

        for i, card in enumerate(player_cards):

            draw_card(card, 100 + i * 150, 400)
        
        player_score_text = font.render(f"Kullanıcı Puanı: {game.player.get_score()}", True, BLACK)
        computer_score_text = font.render(f"Bilgisayar Puanı: {game.computer.get_score()}", True, BLACK)
        screen.blit(player_score_text, (50, 550))
        screen.blit(computer_score_text, (50, 10))

        player_score_text1 = font.render("Kullanıcı Kartı:", True, BLACK)
        computer_score_text1 = font.render("Bilgisayar Kartı:", True, BLACK)
        screen.blit(player_score_text1, (100, 200))
        screen.blit(computer_score_text1, (300, 200))

        if isinstance(game.player, HumanPlayer):
            for i in range(len(game.table_cards)):
                
                draw_card(None, 600, 200 + i * 50, face_up=False)
        else:
            if len(game.table_cards) > 0:
                for i, card in enumerate(game.table_cards):
                    draw_card(card, 600, 200 + i * 50)

        if game.player_card:
            draw_card(game.player_card, 150, 230)
        if game.computer_card:
            draw_card(game.computer_card, 350, 230, face_up=True)
        
        if last_battle:
            pygame.display.flip()
            pygame.time.wait(3000)  
            
            game.player_card = None
            game.computer_card = None
            screen.fill((0, 255, 0))  
            
            player_score_text = font.render(f"Kullanıcı Puanı: {game.player.get_score()}", True, BLACK)
            computer_score_text = font.render(f"Bilgisayar Puanı: {game.computer.get_score()}", True, BLACK)
            screen.blit(player_score_text, (50, 550))
            screen.blit(computer_score_text, (50, 10))

            
            
            
            winner_text = font.render(game.determine_winner(), True, BLACK)
            screen.blit(winner_text, (275, 300))
            pygame.display.flip()
            pygame.time.wait(3000)  
            
            running = False  
        
        pygame.display.flip()
    
    pygame.quit()

if __name__ == "__main__":
    main()
